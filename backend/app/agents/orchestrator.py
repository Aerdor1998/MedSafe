"""
CaptainAgent - Agente orquestrador principal do MedSafe
"""

import asyncio
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime
import uuid

from ..config import settings
from ..db.models import Triage, Report
from ..db.database import get_db_context
from .vision import VisionAgent
from .docagent import DocAgent
from .clinical import ClinicalRulesAgent

logger = logging.getLogger(__name__)


class CaptainAgent:
    """Agente orquestrador que coordena todos os outros agentes"""

    def __init__(self):
        """Inicializar o CaptainAgent"""
        self.vision_agent = VisionAgent()
        self.doc_agent = DocAgent()
        self.clinical_agent = ClinicalRulesAgent()

        logger.info("üö¢ CaptainAgent inicializado")

    async def orchestrate_analysis(
        self,
        triage_data: Dict[str, Any],
        image_data: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """
        Orquestrar an√°lise completa de triagem + vis√£o + evid√™ncias

        Args:
            triage_data: Dados da triagem do paciente
            image_data: Dados da imagem/PDF (opcional)

        Returns:
            Relat√≥rio completo da an√°lise
        """
        try:
            session_id = str(uuid.uuid4())
            logger.info(f"üéØ Iniciando an√°lise orquestrada: {session_id}")

            # 1. Criar triagem no banco
            triage_id = await self._create_triage(triage_data, session_id)

            # 2. An√°lise de imagem/PDF se dispon√≠vel OU usar medication_text diretamente
            vision_result = None
            if image_data:
                # Se h√° file_path, analisar imagem com VisionAgent
                if image_data.get('file_path'):
                    vision_result = await self._analyze_vision(image_data, session_id)
                # Se n√£o h√° file_path mas h√° drug_name/medication_text, usar diretamente
                elif image_data.get('drug_name') or image_data.get('medication_text'):
                    vision_result = {
                        'drug_name': image_data.get('drug_name') or image_data.get('medication_text'),
                        'session_id': session_id,
                        'status': 'text_input'
                    }
                    logger.info(f"üìù Usando medication_text: {vision_result['drug_name']}")

            # 3. Buscar evid√™ncias relevantes
            evidence_snippets = await self._gather_evidence(triage_data, vision_result)

            # 4. An√°lise cl√≠nica com regras
            clinical_analysis = await self._apply_clinical_rules(
                triage_data, vision_result, evidence_snippets
            )

            # 5. Gerar relat√≥rio final
            report = await self._generate_final_report(
                triage_id, vision_result, clinical_analysis, session_id
            )

            logger.info(f"‚úÖ An√°lise orquestrada conclu√≠da: {session_id}")

            return {
                "session_id": session_id,
                "triage_id": str(triage_id),
                "report_id": str(report.id),
                "analysis": clinical_analysis,
                "evidence": evidence_snippets,
                "status": "completed"
            }

        except Exception as e:
            logger.error(f"‚ùå Erro na an√°lise orquestrada: {e}")
            raise

    async def _create_triage(
        self,
        triage_data: Dict[str, Any],
        session_id: str
    ) -> str:
        """Criar triagem no banco de dados"""
        try:
            with get_db_context() as db:
                # Gerar UUID como string para compatibilidade com SQLite
                triage_id = str(uuid.uuid4())

                triage = Triage(
                    id=triage_id,
                    user_id=triage_data.get("user_id"),
                    age=triage_data["age"],
                    weight=triage_data.get("weight"),
                    pregnant=triage_data.get("pregnant", False),
                    cid_codes=triage_data.get("cid_codes", []),
                    meds_in_use=triage_data.get("meds_in_use", []),
                    allergies=triage_data.get("allergies", []),
                    renal_function=triage_data.get("renal_function"),
                    hepatic_function=triage_data.get("hepatic_function"),
                    notes=triage_data.get("notes"),
                    status="processing"
                )

                db.add(triage)
                db.commit()
                db.refresh(triage)

                logger.info(f"üìã Triagem criada: {triage.id}")
                return str(triage.id)

        except Exception as e:
            logger.error(f"‚ùå Erro ao criar triagem: {e}")
            raise

    async def _analyze_vision(
        self,
        image_data: Dict[str, Any],
        session_id: str
    ) -> Optional[Dict[str, Any]]:
        """Analisar imagem/PDF com VisionAgent"""
        try:
            logger.info(f"üëÅÔ∏è Iniciando an√°lise de vis√£o: {session_id}")

            vision_result = await self.vision_agent.analyze_document(
                image_data, session_id
            )

            logger.info(f"‚úÖ An√°lise de vis√£o conclu√≠da: {session_id}")
            return vision_result

        except Exception as e:
            logger.error(f"‚ùå Erro na an√°lise de vis√£o: {e}")
            # N√£o falhar a an√°lise completa se a vis√£o falhar
            return None

    async def _gather_evidence(
        self,
        triage_data: Dict[str, Any],
        vision_result: Optional[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """Coletar evid√™ncias relevantes com DocAgent"""
        try:
            logger.info("üîç Coletando evid√™ncias relevantes")

            # Extrair medicamentos para busca
            medications = []

            # Da triagem
            if triage_data.get("meds_in_use"):
                medications.extend([med.get("name") for med in triage_data["meds_in_use"]])

            # Da vis√£o
            if vision_result and vision_result.get("drug_name"):
                medications.append(vision_result["drug_name"])

            # Buscar evid√™ncias para cada medicamento
            evidence_snippets = []
            for med in medications:
                if med:
                    evidence = await self.doc_agent.find_evidence(
                        drug_name=med,
                        sections=["contraindica√ß√µes", "advert√™ncias", "posologia", "intera√ß√µes"]
                    )
                    evidence_snippets.extend(evidence)

            logger.info(f"üìö {len(evidence_snippets)} evid√™ncias coletadas")
            return evidence_snippets

        except Exception as e:
            logger.error(f"‚ùå Erro ao coletar evid√™ncias: {e}")
            return []

    async def _apply_clinical_rules(
        self,
        triage_data: Dict[str, Any],
        vision_result: Optional[Dict[str, Any]],
        evidence_snippets: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """Aplicar regras cl√≠nicas com ClinicalRulesAgent"""
        try:
            logger.info("üè• Aplicando regras cl√≠nicas")

            clinical_analysis = await self.clinical_agent.analyze_contraindications(
                triage_data=triage_data,
                vision_data=vision_result,
                evidence_snippets=evidence_snippets
            )

            logger.info("‚úÖ An√°lise cl√≠nica conclu√≠da")
            return clinical_analysis

        except Exception as e:
            logger.error(f"‚ùå Erro na an√°lise cl√≠nica: {e}")
            raise

    async def _generate_final_report(
        self,
        triage_id: str,
        vision_result: Optional[Dict[str, Any]],
        clinical_analysis: Dict[str, Any],
        session_id: str
    ) -> Report:
        """Gerar relat√≥rio final no banco de dados"""
        try:
            with get_db_context() as db:
                # Gerar UUID como string para compatibilidade com SQLite
                report_id = str(uuid.uuid4())

                report = Report(
                    id=report_id,
                    triage_id=triage_id,
                    vision_id=vision_result.get("id") if vision_result else None,
                    risk_level=clinical_analysis["risk_level"],
                    contraindications=clinical_analysis.get("contraindications", []),
                    interactions=clinical_analysis.get("interactions", []),
                    dosage_adjustments=clinical_analysis.get("dosage_adjustments", []),
                    adverse_reactions=clinical_analysis.get("adverse_reactions", []),
                    evidence_links=clinical_analysis.get("evidence_links", []),
                    model_used=clinical_analysis.get("model_used", "qwen2.5:7b"),
                    confidence_score=clinical_analysis.get("confidence_score"),
                    analysis_notes=clinical_analysis.get("analysis_notes"),
                    status="completed",
                    is_final=True
                )

                db.add(report)
                db.commit()
                db.refresh(report)

                # Atualizar status da triagem
                triage = db.query(Triage).filter(Triage.id == triage_id).first()
                if triage:
                    triage.status = "completed"
                    db.commit()

                logger.info(f"üìä Relat√≥rio final gerado: {report.id}")
                return report

        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar relat√≥rio final: {e}")
            raise

    async def get_analysis_status(self, session_id: str) -> Dict[str, Any]:
        """Verificar status de uma an√°lise"""
        try:
            # Implementar verifica√ß√£o de status
            return {
                "session_id": session_id,
                "status": "completed",  # Placeholder
                "progress": 100
            }
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar status: {e}")
            return {"status": "error", "error": str(e)}
