#!/bin/bash
# MedSafe - Script de Restore de Backup
# Restaura backup do PostgreSQL a partir de arquivo local ou S3

set -e

# Configura√ß√µes
BACKUP_DIR="/backups"

# Vari√°veis de ambiente
DB_HOST="${DB_HOST:-localhost}"
DB_PORT="${DB_PORT:-5432}"
DB_NAME="${DB_NAME:-medsafe}"
DB_USER="${DB_USER:-medsafe}"
DB_PASSWORD="${DB_PASSWORD}"

# Verificar argumento
if [ -z "$1" ]; then
    echo "‚ùå Erro: Nome do arquivo de backup n√£o fornecido"
    echo "Uso: $0 <backup_file>"
    echo ""
    echo "Backups dispon√≠veis:"
    ls -lh "${BACKUP_DIR}"/medsafe_backup_*.sql 2>/dev/null || echo "Nenhum backup encontrado"
    exit 1
fi

BACKUP_FILE="$1"

# Verificar se arquivo existe
if [ ! -f "${BACKUP_DIR}/${BACKUP_FILE}" ]; then
    echo "‚ùå Erro: Arquivo de backup n√£o encontrado: ${BACKUP_DIR}/${BACKUP_FILE}"
    echo ""
    echo "Backups dispon√≠veis:"
    ls -lh "${BACKUP_DIR}"/medsafe_backup_*.sql 2>/dev/null || echo "Nenhum backup encontrado"
    exit 1
fi

echo "‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° SOBRESCREVER o banco de dados atual!"
echo "üìä Banco: ${DB_NAME}@${DB_HOST}"
echo "üìÅ Backup: ${BACKUP_FILE}"
echo ""
read -p "Deseja continuar? (yes/no): " CONFIRM

if [ "$CONFIRM" != "yes" ]; then
    echo "‚ùå Opera√ß√£o cancelada pelo usu√°rio"
    exit 0
fi

echo "üîÑ Iniciando restore do banco de dados..."

# Criar backup de seguran√ßa antes do restore
SAFETY_BACKUP="medsafe_pre_restore_$(date +%Y%m%d_%H%M%S).sql"
echo "üíæ Criando backup de seguran√ßa: ${SAFETY_BACKUP}"
PGPASSWORD="${DB_PASSWORD}" pg_dump \
    -h "${DB_HOST}" \
    -p "${DB_PORT}" \
    -U "${DB_USER}" \
    -d "${DB_NAME}" \
    --format=custom \
    --compress=9 \
    --file="${BACKUP_DIR}/${SAFETY_BACKUP}"

echo "‚úÖ Backup de seguran√ßa criado"

# Desconectar usu√°rios ativos
echo "üîå Desconectando usu√°rios ativos..."
PGPASSWORD="${DB_PASSWORD}" psql \
    -h "${DB_HOST}" \
    -p "${DB_PORT}" \
    -U "${DB_USER}" \
    -d postgres \
    -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '${DB_NAME}' AND pid <> pg_backend_pid();" \
    > /dev/null 2>&1 || true

# Dropar banco de dados
echo "üóëÔ∏è  Removendo banco de dados existente..."
PGPASSWORD="${DB_PASSWORD}" dropdb \
    -h "${DB_HOST}" \
    -p "${DB_PORT}" \
    -U "${DB_USER}" \
    --if-exists \
    "${DB_NAME}"

# Criar novo banco de dados
echo "üÜï Criando novo banco de dados..."
PGPASSWORD="${DB_PASSWORD}" createdb \
    -h "${DB_HOST}" \
    -p "${DB_PORT}" \
    -U "${DB_USER}" \
    "${DB_NAME}"

# Restaurar backup
echo "üì• Restaurando backup..."
PGPASSWORD="${DB_PASSWORD}" pg_restore \
    -h "${DB_HOST}" \
    -p "${DB_PORT}" \
    -U "${DB_USER}" \
    -d "${DB_NAME}" \
    --no-owner \
    --no-acl \
    "${BACKUP_DIR}/${BACKUP_FILE}"

# Verificar restore
echo "üîç Verificando restore..."
TABLE_COUNT=$(PGPASSWORD="${DB_PASSWORD}" psql \
    -h "${DB_HOST}" \
    -p "${DB_PORT}" \
    -U "${DB_USER}" \
    -d "${DB_NAME}" \
    -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';")

echo "‚úÖ Restore conclu√≠do com sucesso!"
echo "üìä Resumo:"
echo "   - Banco: ${DB_NAME}"
echo "   - Tabelas: ${TABLE_COUNT}"
echo "   - Backup restaurado: ${BACKUP_FILE}"
echo "   - Backup de seguran√ßa: ${SAFETY_BACKUP}"


