version: '3.8'

services:
  # PostgreSQL com pgvector
  db:
    image: ankane/pgvector:latest
    container_name: medsafe_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-medsafe}
      POSTGRES_USER: ${POSTGRES_USER:-medsafe}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-medsafe}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - medsafe_network
    restart: unless-stopped

  # Redis para cache e rate limiting
  redis:
    image: redis:7-alpine
    container_name: medsafe_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - medsafe_network
    restart: unless-stopped

  # Ollama com modelos
  ollama:
    image: ollama/ollama:latest
    container_name: medsafe_ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - medsafe_network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # API MedSafe
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medsafe_api
    environment:
      - DEBUG=false
      - DATABASE_URL=postgresql://${POSTGRES_USER:-medsafe}:${POSTGRES_PASSWORD:-changeme}@db:5432/${POSTGRES_DB:-medsafe}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_LLM=${OLLAMA_LLM:-qwen2.5:7b}
      - OLLAMA_VLM=${OLLAMA_VLM:-qwen2.5vl:7b}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-*}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
      - ./static:/app/static
      - ./frontend:/app/frontend
    ports:
      - "8000:8000"
      - "9090:9090"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - medsafe_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Nginx como reverse proxy
  nginx:
    image: nginx:alpine
    container_name: medsafe_nginx
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/usr/share/nginx/html/static:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - medsafe_network
    restart: unless-stopped

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: medsafe_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - medsafe_network
    restart: unless-stopped

  # Grafana para visualização
  grafana:
    image: grafana/grafana:latest
    container_name: medsafe_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-changeme}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infra/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - medsafe_network
    restart: unless-stopped

  # pgAdmin para gerenciamento do banco
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: medsafe_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@medsafe.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-changeme}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - medsafe_network
    restart: unless-stopped
    profiles:
      - debug

  # Redis Commander para debug
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: medsafe_redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-changeme}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - medsafe_network
    restart: unless-stopped
    profiles:
      - debug

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  medsafe_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16


